# aws cloudformation deploy --stack-name saml-app-configuration --template-file saml-app-config.yaml --tags project=awssso env=nonprod --role-arn "arn:aws:iam::019653912106:role/AWSCloudFormationExecutionRole" --capabilities CAPABILITY_NAMED_IAM

AWSTemplateFormatVersion: 2010-09-09
Description: Configure SAML 2.0 Applications

Parameters:
  StackName: 
    Type: String
    Description: CloudFormation StackName
  MetadataFile:
    Type: String
    Description: The XML metadata file to use when trusting the Identity Provider
  SamlProviderName:
    Type: String
    Description: The name for your SAML provider in IAM
    Default: SamlProviderName
  SamlApp:
    Type: String
    Description: The name of the application required for federated access
    Default: AppName

Resources:
  SamlIdentityProvider:
    Type: Custom::SamlIdentityProvider
    DeletionPolicy : Retain
    Properties:
      ServiceToken: !GetAtt SamlProviderCreator.Arn
      Region: !Ref "AWS::Region"
      Metadata: !Ref MetadataFile
      Name: !Ref SamlProviderName

  SamlProviderCreator:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt SamlLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse

          iam = boto3.client("iam")

          def create_provider(name, doc):
              try:
                  resp = iam.create_saml_provider(SAMLMetadataDocument=doc, Name=name)
                  return(True, resp['SAMLProviderArn'])
              except Exception as e:
                  return (False, f"Cannot create SAML provider: {e}")

          def delete_provider(arn):
              try:
                  resp = iam.delete_saml_provider(SAMLProviderArn=arn)
                  return (True, f"SAML provider with ARN {arn} deleted")
              except ClientError as e:
                  if e.response['Error']['Code'] == "NoSuchEntity":
                      # no need to delete a thing that doesn't exist
                      return (True, f"SAML provider with ARN {arn} does not exist, deletion succeeded")
                  else:
                      return (False, f"Cannot delete SAML provider with ARN {arn}: {e}")
              except Exception as e:
                  return (False, f"Cannot delete SAML provider with ARN {arn}: {e}")

          def update_provider(name, arn, doc):
                  # Need to create the ARN from the name
              arn = f"arn:aws:iam::${AWS::AccountId}:saml-provider/{name}"
              try:
                  resp = iam.update_saml_provider(
                      SAMLMetadataDocument=doc, SAMLProviderArn=arn)
                  return (True, f"SAML provider {arn} updated")
              except Exception as e:
                  return (False, f"Cannot update SAML provider {arn}: {e}")

          def lambda_handler(event, context):
              provider_xml = event['ResourceProperties']['Metadata']
              provider_name = event['ResourceProperties']['Name']
              # create a default ARN from the name; will be overwritten if we are creating
              provider_arn = f"arn:aws:iam::${AWS::AccountId}:saml-provider/{provider_name}"

              if event['RequestType'] == 'Create':
                  res, provider_arn = create_provider(provider_name, provider_xml)
                  reason = "Creation succeeded"
              elif event['RequestType'] == 'Update':
                  res, reason = update_provider(provider_name, provider_arn, provider_xml)
              elif event['RequestType'] == 'Delete':
                  res, reason = delete_provider(provider_arn)
              else:
                  res = False
                  resp = "Unknown operation: " + event['RequestType']

              responseData = {}
              responseData['Reason'] = reason
              if res:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                  responseData, provider_arn)
              else:
                  cfnresponse.send(event, context, cfnresponse.FAILED,
                                  responseData, provider_arn)

  SamlLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${SamlApp}_SamlLambdaExecutionRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${SamlApp}-SamlProviderLambdaExecutionRole-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:*SamlProvider
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  SamlFederatedAdministratorAccessRole:
    Type: AWS::IAM::Role
    DeletionPolicy : Retain
    Properties:
      RoleName: !Sub ${SamlApp}_Administrator
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - !Ref SamlIdentityProvider
            Action: sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                "SAML:aud": "https://signin.aws.amazon.com/saml"
      Policies:
        - PolicyName: !Sub ${SamlApp}-SamlFederatedAdministratorAccessRole-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
Outputs:
  SAMLProviderARN:
    Description: SAML Provider URL
    Value: !Ref SamlIdentityProvider
  SamlFederatedAdministratorAccessRoleArn:
    Description: Saml Federated Access Role ARN
    Value: !GetAtt SamlFederatedAdministratorAccessRole.Arn
